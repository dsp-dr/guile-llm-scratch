# Text Processing Implementation Guide

## Core Concept: Text Preprocessing
Prepare raw text for tokenization and model training.

## Functions to Implement in src/llm/text.scm

### 1. preprocess-text
```scheme
(define (preprocess-text text)
  "Clean and normalize text for training"
  ; 1. Remove extra whitespace
  ; 2. Handle encoding issues
  ; 3. Normalize punctuation
  ; 4. Convert to lowercase (optional)
  )
```

### 2. load-corpus
```scheme
(define (load-corpus file-path)
  "Load text corpus from file"
  ; 1. Read file
  ; 2. Split into lines/paragraphs
  ; 3. Filter empty lines
  ; 4. Return list of text chunks
  )
```

### 3. split-sentences  
```scheme
(define (split-sentences text)
  "Split text into sentences"
  ; Simple: split on ., !, ?
  ; Better: handle abbreviations (Mr., Dr., etc.)
  )
```

### 4. clean-corpus
```scheme
(define (clean-corpus text-list)
  "Clean a list of text chunks"
  ; 1. Remove very short/long texts
  ; 2. Filter inappropriate content
  ; 3. Deduplicate
  )
```

### 5. text-statistics
```scheme
(define (text-statistics corpus)
  "Compute corpus statistics"
  ; Return: word count, sentence count, avg length, etc.
  )
```

## Example Pipeline
```scheme
(let* ((raw-text (load-corpus "data/corpus.txt"))
       (cleaned (clean-corpus raw-text))
       (processed (map preprocess-text cleaned)))
  (text-statistics processed))
```

## Integration with Tokenizer
```scheme
; Use with Agent 1's tokenizer
(use-modules (llm fundamentals))

(let* ((text (preprocess-text "Hello, world!"))
       (tokenizer (make-tokenizer corpus)))
  (tokenizer-encode tokenizer text))
```